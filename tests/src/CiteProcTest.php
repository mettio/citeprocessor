<?php

namespace academicpuma\citeproc;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-30 at 16:32:33.
 */
class CiteProcTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var CiteProc
     */
    protected $object;

    /**
     * @var array
     */
    protected $publications;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
            global $publications;
    //$pubs_folder = dirname('.') . CSLUtils::PUBLICATIONS_FOLDER;  //\academicpuma\citeproc\CSLUtils::PUBLICATIONS_FOLDER;
        
            $file = file_get_contents("data.json");
    
            $this->publications = json_decode($file);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers academicpuma\citeproc\CiteProc::getInstance
     * @todo   Implement testGetInstance().
     */
    public function testGetInstance() {
        
        $this->markTestSkipped();
    }

    /**
     * @covers academicpuma\citeproc\CiteProc::init
     * @todo   Implement testInit().
     */
    public function testInit() {
        
        $this->markTestSkipped();
    }

    /**
     * @covers academicpuma\citeproc\CiteProc::render
     * @todo   Implement testRender().
     */
    public function testRender() {
        foreach($this->publications as $key => $dataObject) {
            
            foreach($dataObject->rendereddata as $styleName => $renderedText) {
                
                $cslFilename = dirname('..').CSLUtils::STYLES_FOLDER.$styleName.".csl";
                
                $csl = file_get_contents($cslFilename);
                $lang = substr($this->publications->{$key}->locales, 0, 2);

                $citeProc = new CiteProc($csl, $lang);

                $actual = preg_replace("!(\s{2,})!"," ",strip_tags($citeProc->render($dataObject->rawdata)));
                
                echo $renderedText."\n";
                $this->assertSame($renderedText, $actual);
            }
        }
    }
}
